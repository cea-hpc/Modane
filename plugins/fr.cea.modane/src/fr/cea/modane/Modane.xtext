/*******************************************************************************
 * Copyright (c) 2021 CEA
 * This program and the accompanying materials are made available under the 
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * SPDX-License-Identifier: EPL-2.0
 * Contributors: see AUTHORS file
 *******************************************************************************/
grammar fr.cea.modane.Modane with org.eclipse.xtext.common.Terminals

generate modane "http://www.cea.fr/modane/Modane"

// ----------------------------------------------------------------------------------------------------------------- //

ModaneModel:
	description=STRING?
	'model' name=QualifiedName ';'
	elements += ModaneElement*;

NamedElement:
	ModaneElement | Pty | EntryPoint | Function | UnitTestFunction | Arg | EnumerationLiteral;

Referenceable:
	Struct | Interface | Enumeration | Legacy;

ModaneElement:
	Variable | ServiceOrModule | Referenceable | ItemFamily | UserCategory;

QualifiedName:
	ID ('.' ID)*;

// Le SimpleName n'est utile que pour voir apparaitre certains noms en gras dans l'éditeur.
// C'est la raison pour laquelle certains noms restent avec la règle 'name=ID'.	
SimpleName:
	ID;

// ----------------------------------------------------------------------------------------------------------------- //

Variable:
	description=STRING?
	('[' dump?='dump'? restore?='rest'? executionDepend?='execdep'? needSync?='sync'? ']')? 
	'Variable' support=ItemType multiplicity=VariableMultiplicity? type=SimpleType name=SimpleName ('family' family=[ItemFamily|QualifiedName])? ';';

// ----------------------------------------------------------------------------------------------------------------- //

Enumeration:
	description=STRING?
	'Enumeration' name=SimpleName '{' literals+=EnumerationLiteral* '}';

EnumerationLiteral:
	description=STRING?
	('[' ('namefr' '=' namefr=STRING)? ('categories' '=' '(' categories+=[UserCategory|QualifiedName]* (',' categories+=[UserCategory|QualifiedName])* ')')? ']')? 
	name=SimpleName ('=' value=STRING)?';';

// ----------------------------------------------------------------------------------------------------------------- //

Legacy:
	description=STRING?
	'Legacy' name=SimpleName 'file' originFile=STRING ('namespace' originNamespace=STRING)? ';';

// ----------------------------------------------------------------------------------------------------------------- //

Struct:
	description=STRING?
	'Struct' name=SimpleName ('extends' parents+=[Struct|QualifiedName] (',' parents+=[Struct|QualifiedName])* )?
	'{' 
		properties+=Pty* 
	'}';
	
Pty:
	description=STRING?
	('[' ('namefr' '=' namefr=STRING)? ('categories' '=' '(' categories+=[UserCategory|QualifiedName]* (',' categories+=[UserCategory|QualifiedName])* ')')? ']')? 
	multiplicity=PtyMultiplicity type=PtyOrArgType name=SimpleName ('=' defaultValue=STRING)? ';';

PtyOrArgType:
	Simple | Item | ItemGroup | Reference;
	
// ----------------------------------------------------------------------------------------------------------------- //

Interface:
	description=STRING?
	'Interface' name=SimpleName ('extends' parents+=[Interface|QualifiedName] (',' parents+=[Interface|QualifiedName])* )?
	'{'
		properties+=Pty*
		functions+=Function*
	'}';

Function:
	description=STRING?
	('[' const?='const'? ']')? 
	((multiplicity=ArgMultiplicity? type=PtyOrArgType)?|'void')  name=SimpleName 
	'(' (args+=Arg (',' args+=Arg)*)? ')' 
	 ('on' support=FunctionItemType sequential?='sequentially'? )?  
	 ('use' '(' vars+=VarReference (',' vars+=VarReference)* ')')?
	 ('call' '(' calls+=[Function|QualifiedName] (',' calls+=[Function|QualifiedName])* ')')? ';';

Arg:
	ArgDefinition | VarDefinition;	

ArgDefinition:
	direction=Direction multiplicity=ArgMultiplicity? type=PtyOrArgType name=ID ('=' defaultValue=STRING)?;

VarDefinition:
	direction=Direction support=ItemType multiplicity=VariableMultiplicity? type=SimpleType name=ID;

VarReference:
	direction=Direction variable=[Variable|QualifiedName];

// ----------------------------------------------------------------------------------------------------------------- //

ItemFamily:
	description=STRING?
	'ItemFamily' name=SimpleName 
	'on' support=ItemType ';';

// ----------------------------------------------------------------------------------------------------------------- //

ServiceOrModule:
	Service | Module;
	
Service:
	description=STRING?
	('[' type=ServiceType? singleton?='singleton'? ('namefr' '=' namefr=STRING)? ('categories' '=' '(' categories+=[UserCategory|QualifiedName]* (',' categories+=[UserCategory|QualifiedName])* ')')? classSetUp?='class-set-up'? testSetUp?='test-set-up'? classTearDown?='class-tear-down'? testTearDown?='test-tear-down'? ']')? 
	'Service' name=SimpleName 
	'implements' interfaces+=[Interface|QualifiedName] (',' interfaces+=[Interface|QualifiedName])*
	'{'
		properties+=Pty*
		overrideFuncs+=OverrideFunction*
		functions+=Function*
		unitTestFunctions+=UnitTestFunction*
	'}';
	
OverrideFunction:
	description=STRING?
	'override' func=[Function|QualifiedName] 
	 ('use' '(' vars+=VarReference (',' vars+=VarReference)* ')')?
	 ('call' '(' calls+=[Function|QualifiedName] (',' calls+=[Function|QualifiedName])* ')')? ';';

UnitTestFunction:
	description=STRING?
	'test' name=SimpleName 'label' label=STRING ';';
	
enum ServiceType:
	caseoption | application | session | subdomain;

// ----------------------------------------------------------------------------------------------------------------- //

Module:
	description=STRING?
	('[' ('namefr' '=' namefr=STRING)? ('categories' '=' '(' categories+=[UserCategory|QualifiedName]* (',' categories+=[UserCategory|QualifiedName])* ')')? ']')? 
	'Module' name=SimpleName ('implements' interfaces+=[Interface|QualifiedName] (',' interfaces+=[Interface|QualifiedName])* )?
	'{'
		properties+=Pty*
		overrideFuncs+=OverrideFunction*
		functions+=Function*
		entryPoints+=EntryPoint*
	'}';

EntryPoint:
	description=STRING?
	('[' autoLoad=EntryPointAutoLoad ']')? 
	'@' location=EntryPointLocation name=SimpleName  
	('on' support=FunctionItemType sequential?='sequentially'? )? 
	('use' '(' vars+=VarReference (',' vars+=VarReference)* ')')?
	('call' '(' calls+=[Function|QualifiedName] (',' calls+=[Function|QualifiedName])* ')')? ';';

enum EntryPointLocation:
	ComputeLoop | OnMeshChanged | OnMeshRefinement | Init | ContinueInit | StartInit | Restore | Build | Exit;
	
enum EntryPointAutoLoad:
	NoAutoLoad | AutoLoadBegin | AutoLoadEnd;	
	
UserCategory:
	description=STRING?
	'UserCategory' name=SimpleName ';';

// ----------------------------------------------------------------------------------------------------------------- //

Simple:
	type=SimpleType;
	
Item:
	type=ItemType;
	
ItemGroup:
	type=ItemGroupType;

Reference:
	target=[Referenceable|QualifiedName];

enum ItemType:
	NoItem | Item | Cell | Node | Face | Particle | MatCell | EnvCell | ComponentCell | AllEnvCell | DoF;

enum FunctionItemType:
	NoItem | Item | Cell | Node | Face | Particle | MatCell | EnvCell | ComponentCell | AllEnvCell | DoF | ItemTypeSpecialized;
	
enum ItemGroupType:
	NoItemGroup | ItemGroup | CellGroup | NodeGroup | FaceGroup | ParticleGroup | MatCellGroup | EnvCellGroup | ComponentCellGroup | AllEnvCellGroup; 

enum SimpleType: 
	bool | String| Integer | Int32 | Int64 | Real | Real2 | Real3 | Real2x2 | Real3x3;

enum Direction:
	in | out | inout;

enum PtyMultiplicity:
	ZeroOne='[0..1]' | OneOne='[1..1]' | ZeroStar='[0..*]' | OneStar='[1..*]';
	
enum VariableMultiplicity:
	Scalar='[1]' | Array='[*]' | Array2='[*,*]';

enum ArgMultiplicity:
	Scalar='[1]' | Array='[*]';
	
// ----------------------------------------------------------------------------------------------------------------- //

